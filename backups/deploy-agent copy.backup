---

copyright:
  years:  2022, 2023
lastupdated: "2023-11-29"

keywords: 

subcollection: logs-router

---

{{site.data.keyword.attribute-definition-list}}

# Deploying the {{site.data.keyword.logs_routing_full}} agent to your cluster
{: #deploying-agent}

You can deploy an {{site.data.keyword.logs_routing_full_notm}} agent on a Kubernetes or {{site.data.keyword.openshiftlong_notm}} cluster.
The agent collects and routes infrastructure and application logs to a {{site.data.keyword.la_short}} instance.
{: shortdesc}

## Setting up permissions for ingestion
{: #ingestion-perms}

The overall process is similar to that described in [setting up permissions for onboarding](/docs/logs-router?topic=logs-router-onboarding#setting-permissions),
and the same notes and tips apply here.

The role that is required for sending logs to {{site.data.keyword.logs_routing_full_notm}} is `Writer`.

If you are the account owner, you might already have sufficient access without requiring extra permissions.
{: tip}

Granting the role can be done by using the `ibmcloud` CLI. Use the appropriate command for the type of identity:

For user accounts:
```text
ibmcloud iam user-policy-create <username> --roles Writer --service-name logs-router
```
{: pre}

For service IDs:
```text
ibmcloud iam service-policy-create <serviceID> --roles Writer --service-name logs-router
```
{: pre}

For trusted profiles:
```text
ibmcloud iam tp-policy-create <trustedProfile> --roles Writer --service-name logs-router
```
{: pre}

### Generating an API Key for user account or service ID authentication
{: #api-key-for-service-id}

When you are using a user account or service ID, an API key must be created to authenticate the agent. For authentication with trusted profiles, this step is not required.

1. Log in using the IBM Cloud CLI.

    ```text
    ibmcloud login -a test.cloud.ibm.com
    ```
    {: pre}

    Parameters for the login vary depending on whether you log in as a user or service ID. Make sure to log in as the identity with the `Writer` role.

2. Create an API key for the logged-in account.

    ```sh
    export INGESTION_API_KEY=`ibmcloud iam api-key-create logs-router-ingestion --output json | jq -r '.apikey'`
    ```
    {: pre}

    Make sure you are logged in to the cluster where you want to deploy the {{site.data.keyword.logs_routing_full_notm}} agent, and that you are targeting the correct namespace (`logger-agent` by default).

3. Create a `Secret` object that contains the API key value on your cluster.

    ```sh
    kubectl create secret generic logs-router-api-key --from-literal IAM_API_KEY=${INGESTION_API_KEY} -n logger-agent
    ```
    {: pre}

## Setting up and deploying the {{site.data.keyword.logs_routing_full_notm}} agent configuration
{: #agent-configuration}

1. To install the {{site.data.keyword.logs_routing_full_notm}} Agent, use the following `curl` command in your terminal:
    ```sh
    curl -sSL https://ibm.biz/logs-router-setup | bash -s -- \
      -v <agent_version> \
      -e <iam_environment> \
      -m <iam_auth_mode> \
      -i <trusted_profile_id> \
      -k <iam_api_key>
      -t <cluster_type> \
      -r <region> \
      -p <ingester_target_port>
    ```
    {: codeblock}

    Where:

    `-v`
    :   Agent version. Specify the version of the {{site.data.keyword.logs_routing_full_notm}} Agent (for example `latest`).

    `-e`
    :   IAM environment. Choose the IAM environment (`Production` | `PrivateProduction` | `Staging` | `PrivateStaging`).
    
        Where:
        
        - `Production`: Public endpoint at `iam.cloud.ibm.com`.
        - `PrivateProduction`: Private endpoint at `private.iam.cloud.ibm.com`.
        - `Staging`: Staging endpoint at `iam.test.cloud.ibm.com`.
        - `PrivateStaging`: Private staging endpoint at `private.iam.test.cloud.ibm.com`.

    `-m`
    :   IAM authentication mode (`TrustedProfile` | `IAMAPIKey`).

    `-i`
    :   Trusted profile ID (required for `TrustedProfile` mode). Provide the Trusted Profile ID. When using trusted profiles, set to the ID configured in [Setting up Permissions for Ingestion](/docs/logs-router?topic=logs-router-agent-iam-permissions&interface=cli).

        For more information on Trusted Profiles, see [Creating a Trusted Profile](/docs/account?topic=account-create-trusted-profile). {: tip}

    `-k`
    :   IAM API key (required for `IAMAPIKey` mode). Make sure you follow the instructions in [Generating an API Key](/docs/logs-router?topic=logs-router-api-key).

        For more information about IAM API Keys, see [Managing API Keys](/docs/account?topic=account-manapikey). 
        {: tip}

    `-t`
    :   Cluster type (`OpenShift` or `Kubernetes`). Specify if you are deploying the agent to an {{site.data.keyword.openshiftlong_notm}} (`OpenShift`) or {{site.data.keyword.containerlong_notm}} (`Kubernetes`) cluster.


    `-r`
    :   Specify the region where the {{site.data.keyword.logs_routing_full_notm}} Ingester endpoint is located (for example `us-east`).

    `-p`
    :   Ingester target port. The port must be `443` if you are connecting by using a VPE gateway, or port `3443` when connecting by using CSEs.

2. Verify that the agent was successfully deployed. First, retrieve the list of agent pods by using the following command:

    ```sh
    oc get pods -n logger-agent -o wide
    ```
    {: pre}

    ```text
    NAME                     READY     STATUS    RESTARTS AGE    IP              NODE           NOMINATED NODE   READINESS GATES
    logger-agent-ds-4lwvt      1/1     Running   0          2d5h   172.17.61.181   192.168.16.4   <none>           <none>
    logger-agent-ds-g7z87      1/1     Running   0          2d5h   172.17.0.48     192.168.32.4   <none>           <none>
    logger-agent-ds-nw56s      1/1     Running   0          2d5h   172.17.32.232   192.168.0.10   <none>           <none>
    logger-agent-ds-wcpbl      1/1     Running   0          2d5h   172.17.6.190    192.168.0.9    <none>           <none>
    ```
    {: screen}

    The `READY` column shows `1/1` for all pods, with a `STATUS` of `Running`. Verify that an agent pod is ready for each node in your cluster:

    ```sh
    oc get nodes
    ```

    ```text
    NAME           STATUS   ROLES           AGE   VERSION
    192.168.0.10   Ready    master,worker   8d    v1.20.0+558d959
    192.168.0.9    Ready    master,worker   8d    v1.20.0+558d959
    192.168.16.4   Ready    master,worker   8d    v1.20.0+558d959
    192.168.32.4   Ready    master,worker   8d    v1.20.0+558d959
    ```
    {: screen}

    The number of items in each of these two lists need to be the same,
    and you can match the IP addresses in the node names with the values in the `NODE` column of the pod listing.

    If your nodes are not named by their IP, you can append the `-o wide` option and compare the values in the `INTERNAL-IP` column instead.

3. Verify that logs are being delivered to your instance.

    1. [Go to the web UI for your {{site.data.keyword.la_short}} instance.](/docs/log-analysis?topic=log-analysis-launch&interface=ui)

    2. When your agent is correctly configured, you see logs display in the default dashboard view. 
    
       If you did not change the log source configuration of the deployment, the dummy messages that contain the text `TEST MESSAGE` on {{site.data.keyword.openshiftlong_notm}} or `THIS IS FROM K8S CLUSTER` for {{site.data.keyword.containerlong_notm}} are displayed in the dashboard.

       If you changed the log source configuration, logs corresponding to the configured sources are displayed.
